    #======================================================================
    # Client type detection
    #----------------------------------------------------------------------

    map $http_user_agent $client {
        default      "";  # aka desktop
        "TV"         "tv";
        " MSIE "     "basic";
        " Kindle "   "basic";
        " iOS 2"     "basic";
        " iOS 3"     "basic";
        " iOS 4"     "basic";
        " iOS 5"     "basic";
        " iOS 6"     "basic";
        " iOS 7"     "basic";
        " iOS 8"     "basic";
        " Android 2" "basic";
        " Android 3" "basic";
        " Android 4" "basic";
        " iPad "     "tablet";
        " Mobile "   "mobile";
        " iOS "      "tablet";
        " Android "  "tablet";
        " Tizen "    "tablet";
    }

server {
    listen       80;
    server_name  geekspeak.org;

    charset utf-8;
    #access_log  /var/log/nginx/host.access.log  main;

    root   /var/www/docroot;
    index  index.html;

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /var/www/docroot;
    }

    #======================================================================
    # Multi-client communication
    #----------------------------------------------------------------------

    #location = /pubsub {
    #    nchan_publisher;
    #    nchan_subscriber;
    #    nchan_channel_id      $arg_id;
    #    nchan_message_timeout 3h;
    #}

    #======================================================================
    # Cache layer
    #----------------------------------------------------------------------

    location / {
        proxy_pass                http://localhost:81;
        proxy_buffering           on;
        proxy_ignore_client_abort on;
        proxy_set_header          X-Client-Type $client;
#        proxy_cache               geekspeak;
#        proxy_cache_valid         10m;
#        proxy_cache_valid         404 1m;
#        proxy_cache_use_stale     error timeout invalid_header updating
#                                  http_500 http_502 http_503 http_504;
    }

    #======================================================================
    # System Status
    #----------------------------------------------------------------------

    location = /health {
        add_header Content-Type text/plain;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        echo "HTTP OK";
    }

    location = /health/lua {
        add_header Content-Type text/plain;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        content_by_lua_block {
            ngx.say("Lua OK")
        }
    }

    #======================================================================
    # Static Files & Redirects
    #----------------------------------------------------------------------

    location ~ /s\d\d/e\d\d(?:/bits)? {
        return 301 $uri/;
    }

    location ~ /(s\d\d)/(e\d\d)/\.(mp3|ogg|mp4) {
        root /var/www/geekspeak.org/media;
        try_files $1$2.$3 =404;
        expires max;
    }

    location ~ /(s\d\d)/(e\d\d)/teaser {
        root /var/www/geekspeak.org/media;
        try_files $1$2.svgz
                  $1$2.svg
                  $1$2.jpg
                  $1$2.png
                  $1$2.gif
                  =404;
        expires max;
    }

    location ~* \.svgz {
        #prevent gzipping already gzipped resource.
        gzip off;
        add_header Content-Encoding "gzip";
    }

    # BoNG files
    # https://docs.google.com/spreadsheets/d/1jqLkDZkIXKRXjQUYvPG8BmcYCp3yexCYwfpeblau62I
    location ~* \.bng {
        add_header Content-Encoding "br";
    }

    #======================================================================
    # Property update layer
    #----------------------------------------------------------------------

    # "field" matches "published", "title", "description", etc.
    location ~ /s(?<season>\d\d)/e(?<episode>\d\d)/(?<field>[a-z]+) {
        content_by_lua_block {
            if ngx.req.get_method() == 'PUT' then
                local v = ngx.var
                local dbres = assert(query(
                    'UPDATE episodes SET $1 = $2 WHERE num = episode_num($3, $4)',
                    as_ident(v.field), ngx.body, v.season, v.episode))
            end
            exit(ngx.HTTP_NO_CONTENT)
        }
    }

    location ~ /s\d\d/e\d\d/bits/(?<id>\d+)/(?<field>[a-z]+) {
        content_by_lua_block {
            if ngx.req.get_method() == 'PUT' then
                local v = ngx.var
                local dbres = assert(query('UPDATE bits SET $1 = $2 WHERE id = $3',
                                           as_ident(v.field), ngx.body, v.id))
            end
            exit(ngx.HTTP_NO_CONTENT)
        }
    }
}