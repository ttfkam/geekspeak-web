#######################################################################
#======================================================================
# Dynamic server
#----------------------------------------------------------------------
#######################################################################

lua_package_path '/usr/local/lua/?.lua;;';

init_by_lua_block {
    pgmoon = require('pgmoon')
    mustache = require('lustache')

    SSI_RE = [=[<!--#include\s+virtual="([^"]+)"\s+-->]=]

    -- Your 1-stop shop to database queries
    function query(q, ...)
        local pg = pgmoon.new({ host = 'db', database = 'geekspeak', user = 'geekspeak_web' })
        assert(pg:connect())
        local res = pg:query(q, ...)
        pg:disconnect()
        return res
    end

    function authorize(...)
        if ngx.req.is_internal() then
            return
        end

        local v = ngx.var
        local res = assert(query('SELECT authorize($1, $2, $3, $4)',
                                 v.cookie_nonce, v.remote_addr, v.http_user_agent,
                                 as_array({...})))
        if res[1].authorized then
            return
        else
            exit(ngx.HTTP_FORBIDDEN)
        end
    end

    -- Template substitution
    function include(guard)
        return function(m)
            local top = (#record == 0)
            local uri = m[1]
            if guard[uri] then
                ngx.log(ngx.ERR, 'Infinite template recursion: "' .. uri .. '"')
                return ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
            end
            guard[uri] = true
            local t = ngx.location.capture(uri, { copy_all_vars = true })
            if t.truncated or t.status ~= 200 then
                ngx.log(ngx.ERR, 'Template failed to load: "' .. uri .. '"')
                return ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
            end
            local res, n, err = ngx.re.gsub(t.body, SSI_RE, include(guard), 'i')
            if top then
                return { header = t.header, body = res }
            end
            return res
        end
    end

    -- Template expansion
    function template(json, uri)
        local guard = {}  -- To prevent infinite template recursion
        local t = include(guard)({ nil, uri })
        t.header['Vary'] = 'X-Client-Type'
        local obj = assert(require('cjson').decode(json))
        return { header = t.header, body = mustache:render(t.body, obj) }
    end

    -- Convenience method to send
    function send(resp)
        ngx.status = ngx.HTTP_OK
        if resp.header.Vary then
            ngx.header.Vary = resp.header.Vary
        end
        ngx.header['Content-Type'] = resp.header['Content-Type']
        ngx.header['Last-Modified'] = resp.header['Last-Modified'] or ngx.now
        ngx.header['Content-Length'] = #resp.body
        ngx.print(resp.body)
    end

    -- Convenience method to send
    function sendJson(resp)
        resp.header['Content-Type'] = 'application/json'
        send(resp)
    end
}

server {
    listen 81 default_server;
    listen [::]:81 default_server;
    server_name geekspeak.org;

    set $client $http_x_client_type;

    root   /var/www/docroot;
    index  index.html;

    #======================================================================
    # Access restrictions
    #----------------------------------------------------------------------

    # allow 127.0.0.1;
    # deny all;

#    limit_except POST {
#        access_by_lua_block { authorize('authenticated') }
#    }

#    limit_except PUT {
#        access_by_lua_block { authorize('onair', 'offair') }
#    }

#    limit_except DELETE {
#        access_by_lua_block { authorize('onair', 'offair') }
#    }

    #======================================================================
    # Status layer
    #----------------------------------------------------------------------

    location = /logic_check {
        add_header Content-Type text/plain;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        content_by_lua_block {
            ngx.say("OK")
        }
    }

    location = /db_check {
        add_header Content-Type text/plain;
        expires    5s;
        content_by_lua_block {
            local res = query("SELECT 'OK'::text AS status")
            ngx.say(res[1].status)
        }
    }

    #======================================================================
    # Content layer
    #----------------------------------------------------------------------

    # /
    # /contact -> same origin HTTP_REFERRER
    # /.rss -> /episodes/rss.xml
    # /episodes/2017/05/03/ -> /s17/e21/
    # /s17/e04/ ->
    # /s17/e04/title <->
    # /s17/e04/description <->
    # /s17/e04/content <->
    # /s17/e04/recorded <->
    # /s17/e04/published <->
    # /s17/e04/foobar.png <->
    # /s17/e04/.mp3
    # /s17/e04/teaser <-> binary image data
    # /s17/e04/bits/5674/title <->
    # /s17/e04/bits/5674/description <->
    # /s17/e04/bits/5674/isbn <->
    # /s17/e04/bits/5674/teaser -> binary image data
    # /s17/e04/bits/ <-> [5674,5675,5676,5673]

    location = / {
    }

    location = /.json {
    }

    location ~ ^(?<dir>.+/)(?<file>[^/]+)$ {
       try_files $dir$client\.$file $dir$file =404;
    }

    location ~ ^/s(?<season>\d\d)/e(?<episode>\d\d)/\.json {
        content_by_lua_block {
            local v = ngx.var
            local dbres = assert(query('SELECT episode_as_json(episode_num($1, $2), http($3))',
                                       v.season, v.episode, ngx.header['If-Modified-Since']))
            local resp = { body = dbres[1], header = { "Last-Modified" = dbres[1].modified } }
            resp.header['Cache-Control'] = 'public, max-age=30'
            sendJson(resp)
        }
    }

    location ~ ^/s(?<season>\d\d)/e(?<episode>\d\d)/ {
        content_by_lua_block {
            local v = ngx.var
            local jsonResp = ngx.location.capture(v.uri .. '.json', { copy_all_vars = true })
            if jsonResp.status ~= 200 then
                exit(jsonResp.status)
            end
            local resp = template(jsonResp.body, '/episode.template.html')
            send(resp)
        }
    }

    # "field" matches "published", "title", "description", etc.
    location ~ ^/s(?<season>\d\d)/e(?<episode>\d\d)/(?<field>[a-z]+) {
        content_by_lua_block {
            local v = ngx.var
            if ngx.method = 'PUT' then
                local dbres = assert(query('UPDATE episodes SET $1 = $2 WHERE num = episode_num($3, $4)',
                                           as_ident(v.field), ngx.body, v.season, v.episode))
                exit(ngx.HTTP_NO_CONTENT)
            elsif ngx.method = 'GET' then
                local v = ngx.var
                local dbres = assert(query('SELECT $1 FROM episodes WHERE num = episode_num($2, $3)',
                                           as_ident(v.field), v.season, v.episode))
                ngx.header['Cache-Control'] = 'public, max-age=5'
                ngx.header['Content-Type'] = 'text/plain'
                ngx.say(dbres[0][v.field])
            else
                exit(ngx.HTTP_BAD_METHOD)
            end
        }
    }

    location ~ /(s\d\d)/(e\d\d)/([^/]+)\.([a-z0-9]+) {
        root /var/www/geekspeak.org/media;
        try_files "$1$2 $3.$client.$4"
                  "$1$2 $3.$4"
                  =404;
    }

    location ~ /s(\d\d)/e(\d\d)/([^/]+\.[a-z0-9]) {
    }

    location ~ /s\d\d/e\d\d/bits/(?<id>\d+)/(?<field>[a-z]+) {
        content_by_lua_block {
            if ngx.method = 'PUT' then
                local v = ngx.var
                local dbres = assert(query('UPDATE bits SET $1 = $2 WHERE id = $3',
                                           as_ident(v.field), ngx.body, v.id))
                exit(ngx.HTTP_NO_CONTENT)
            elsif ngx.method = 'GET' then
                local v = ngx.var
                local dbres = assert(query('SELECT $1 FROM bits WHERE id = $2',
                                           as_ident(v.field), v.id))
                ngx.header['Cache-Control'] = 'public, max-age=5'
                ngx.header['Content-Type'] = 'text/plain'
                ngx.say(dbres[0][v.field])
            else
                exit(ngx.HTTP_BAD_METHOD)
            end
        }
    }
}
